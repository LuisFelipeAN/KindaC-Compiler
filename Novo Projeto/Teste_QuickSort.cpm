// Protótipo da função de ordenação
// Ordination function prototype
int quick_sort(int *vetor, int esq, int dir) {
    int i, j;
    int centro, aux;
     
    i = esq;
    j = dir;
    centro = vetor[(esq + dir) / 2];
     
    while(i <= j) {
        while(vetor[i] < centro && i < dir) {
            i = i + 1;
        }
        while(vetor[j] > centro && j > esq) {
            j = j - 1;
        }
        if(i <= j) {
            aux = vetor[i];
            vetor[i] = vetor[j];
            vetor[j] = aux;
            i = i + 1;
            j = j - 1;
        }
    }
     
    if(j > esq) {
        quick_sort(vetor, esq, j);
    }
    if(i < dir) {
        quick_sort(vetor, i, dir);
    }
    return 0;
}


int main(){
    int i, vet[10], MAX;

    // Lê MAX ou 10 valores
    MAX = 10;
    i = 0;

    while(i < MAX){
        print("Digite um valor: ");
        readln(&vet[i]);
        print("Valor adicionado: %d\n", vet[i]);
        i = i + 1;
    }

    // Ordena os valores
    quick_sort(vet, 0, MAX - 1);

    // Imprime os valores ordenados
    print("\n\nValores ordenados\n");
    i = 0;
    while(i < MAX){
        print("%d\t", vet[i]);
        i = i + 1;
    }

    return 0;
}
